
#+title emacs configuration
#+property: header-args emacs-lisp :tangle ./.emacs
#+auto_tangle: t

* Emacs dotfile

[[./emacs.org.jpg]]

- use ~C-c C-x C-v~ =org-toggle-inline-image=.
  
- use ~C-c C-v t~ to regenerate the emacs dotfile.

- use ~M-q~ to trigger the ~adaptive-fill-mode~.

- use ~C-c C-c~ to execute the code in a lisp code block.

- append ~:tangle no~ to avoid write the source code block to the generate file.

#+begin_src emacs-lisp
  ;; generated from emacs.org file
#+end_src

** Performance

- Make gc pauses faster by decreasing the threshold.
- The default is 800 kilobytes. Measured in bytes.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src


** Package Configuration

*Melpa and package configuration*

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

List of packages needed by this configuration.

#+begin_src emacs-lisp
  (setq package-selected-packages '(
    use-package
    doom-themes
    lsp-mode
    multiple-cursors 
    all-the-icons
    powerline
    neotree
    fill-column-indicator
    bazel
    groovy-mode
    yaml
    yaml-mode
    haskell-mode
    elfeed
    json-mode
    rainbow-delimiters
    which-key
    ivy
    ivy-rich
    counsel
    treemacs
    visual-fill
    visual-fill-column
    dashboard
    org-auto-tangle
    evil
    undo-fu
    evil-collection
    swiper
    smooth-scrolling
    no-littering
    doom-modeline
    nix-haskell-mode
    projectile))

  (when (cl-find-if-not #'package-installed-p package-selected-packages)
    (package-refresh-contents)
    (mapc #'package-install package-selected-packages))
#+end_src

#+RESULTS:

Use ensure to ensure package installation when use-requiered is used.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


** Look and feel

#+begin_src emacs-lisp
  (display-time)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
  (column-number-mode 1)
  (line-number-mode 1)
  (setq inhibit-startup-screen t)
  (setq ring-bell-function 'ignore)
  (savehist-mode 1)
  (global-linum-mode 1)
  ;;(global-hl-line-mode 1)
  (set-fringe-mode 10)
  (define-key read-expression-map (kbd "TAB") #'lisp-complete-symbol)
#+end_src

*Powerline* (/disabled/):

#+begin_src emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
  (setq powerline-arrow-shape 'arrow)
#+end_src

*all-the-icons*:

Install the fonts: ~M-x all-the-icons-install-fonts~

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

*Modeline* (/disabled/):

#+begin_src emacs-lisp :tangle no
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)))
#+end_src

#+RESULTS:

*Line Highlighting*:

Emacs modes inherits from super modes or base modes, e.g.:

- lisp-mode inherits from prog-mode.
- prog-mode inherits from fundamental-mode
- text-mode inherits from fundamental-mode.

Lets enable the hl on prog modes, org-mode and text-mode.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (hl-line-mode 1)))
  (add-hook 'text-mode-hook (lambda () (hl-line-mode 1)))
  (add-hook 'org-mode-hook (lambda () (hl-line-mode 1)))
#+end_src


*** Theme

Interactive selection: ~M-x counsel-load-theme~
    
Development mode theme:
    
#+begin_src emacs-lisp
  (defun dev-mode ()
    (interactive)
    (save-excursion
      (require 'doom-themes)
      (load-theme 'doom-one t)
      (text-scale-set 0)
      (cond
       ((eq system-type 'gnu/linux)
        (set-face-attribute 'default nil :family "Hack" :height 100)
        (set-background-color "#1c2023")
        (set-foreground-color "#c7ccd1"))
       ((eq system-type 'darwin)
        (set-face-attribute 'default nil :family "Courier New" :height 140)
        (set-background-color "#121212")
        (set-foreground-color "#d8dee8")))))
  ;;(global-set-key (kbd "C-c r m") 'dev-mode)
#+end_src

Presentation mode theme:

#+begin_src emacs-lisp
  (defun presentation-mode ()
    (interactive)
    (save-excursion
      (dev-mode)
      (require 'doom-themes)
      (load-theme 'doom-one-light t)
      (text-scale-set 3)))
  ;;(global-set-key (kbd "C-c r m") 'presentation-mode)
#+end_src


** Behavior

Smooth scrolling, from https://www.emacswiki.org/emacs/SmoothScrolling:

scroll one line at a time (less "jumpy" than defaults)
    
- ~(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))~ ;; one line at a time
- ~(setq mouse-wheel-progressive-speed nil)~ ;; don't accelerate scrolling  
- ~(setq mouse-wheel-follow-mouse 't)~ ;; scroll window under mouse  
- ~(setq scroll-step 1)~ ;; keyboard scroll one line at a time

#+begin_src emacs-lisp :tangle no
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) 
    (setq mouse-wheel-progressive-speed nil)
    (setq mouse-wheel-follow-mouse 't)
    (setq scroll-step 1)
#+end_src

Previous block is disabled from tangle, there's a package to deal with this:

#+begin_src emacs-lisp
  (require 'smooth-scrolling)
  (smooth-scrolling-mode 1)
#+end_src


** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

  (defun custom/dashboard-mode-hooks ()
    (fci-mode 0)
    (linum-mode 0)
    (hl-line-mode 0))
  (add-hook 'dashboard-mode-hook 'custom/dashboard-mode-hooks)
#+end_src


** Term

A =termmode= is being used to run term with =/bin/bash=.

- ~C-c o~, emulates ~C-x o~
- ~C-c C-j~, term-line-mode
- ~C-c C-k~, go back to char mode
- ~C-c C-c~, emulates a ctrl+c sent to the terminal
  
#+begin_src emacs-lisp
  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "/bin/bash")
    (fci-mode 0)
    (linum-mode 0)
    (hl-line-mode 0))
#+end_src


** Editor

Bindings to move around the buffers, global keysets and def alises.

#+begin_src emacs-lisp
  (global-set-key "\C-l" 'goto-line)
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (global-unset-key (kbd "C-z"))
  (fset 'yes-or-no-p 'y-or-n-p)

  (defalias 'select-all 'mark-whole-buffer)
#+end_src

*Tabs:*

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)
  (setq-default py-indent-offset 4)
  (setq standard-indent 4)
  (setq c-default-style "linux" c-basic-offset 4)
  (setq scroll-step 1)
  (setq make-backup-files nil)
  (setq auto-fill-mode 1)
  (setq next-line-add-newlines nil)
#+end_src

*Fill column indicator*:

It draws a line at char 80, it marks with red any char after char 80.

#+begin_src emacs-lisp
  (require 'fill-column-indicator)
  (define-globalized-minor-mode global-fci-mode fci-mode (
    lambda () (fci-mode 1)))
  (global-fci-mode 1)
  (setq fci-rule-column 79)
  (setq fci-rule-width 1)
  (setq fci-rule-color "grey22")

  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face lines-tail))
  (global-whitespace-mode 1)
#+end_src

*Rainbow delimiters*:

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*Paren mode*:

#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+end_src

*Multiple cursors*:

#+begin_src emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c m c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-word-like-this)
#+end_src

*Treemacs*:

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    :config
    (progn
      (setq
       treemacs-no-png-images t))
    (treemacs-resize-icons 14)
    (dolist (face '(treemacs-root-face
                    treemacs-git-unmodified-face
                    treemacs-git-modified-face
                    treemacs-git-renamed-face
                    treemacs-git-ignored-face
                    treemacs-git-untracked-face
                    treemacs-git-added-face
                    treemacs-git-conflict-face
                    treemacs-directory-face
                    treemacs-directory-collapsed-face
                    treemacs-file-face
                    treemacs-tags-face))
      (set-face-attribute face nil :family "Courier New" :height 140)))
#+end_src

*No Littering*:

Keep emacs folder and project folders clean:

#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.cache/emacs")
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src


** Evil Mode

Check the undo-fu package for vim style undo.

#+begin_src emacs-lisp :tangle no
  (use-package undo-fu)

  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src


** Orgmode

/C- '/ can be used to edit source code block, same keybinding can be used to
enter and exit the mini editor (which supports syntax highlighting).

/C-c C-c/ can execute the code within the source code block.
   
This configuration limits the orgfile to 80 chars width and content is put
at the center of the buffer.

#+begin_src emacs-lisp
  (defun custom/org-mode-visual-fill ()
    (setq visual-fill-column-width 80
          visual-fill-column-center-text t
          fci-mode 0)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook
    (org-mode . custom/org-mode-visual-fill))
#+end_src

Visually hide the begin_src statements:

#+begin_src emacs-lisp
  (setq-default prettify-symbols-alist '(("#+begin_src" . "")
                                         ("#+begin_src emacs-lisp" . "")
                                         ("#+begin_src text :tangle no" . "")
                                         ("#+end_src" . "")))
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'org-mode-hook 'prettify-symbols-mode)
#+end_src

Remove emphasis markers:

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-hide-emphasis-markers t))
#+end_src

Babel configuration:

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
#+end_src

Structured templates, these are generated on the editor by typing, e.g:
=<el + tab=.

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("nn" . "src text :tangle no"))
#+end_src

Other org configuration:

Don't ask code-execution confirmation:

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Add src lang modes to org, use this as, e.g.: /#+begin_src conf-unix/

#+begin_src emacs-lisp
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

Tangle configuration:

- use ~:tangle no~ in each block to avoid include the source code block in the
final file generated.

#+begin_src emacs-lisp
  (defun custom/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "some/absolute/path/emacs.org"))
      ;; let dynamic scoping?
      (let ((org-confirm-babel-evaluate-nil))
        (org-babel-table))))

  (add-hook 'org-mode-hook
    (lambda ()
    (add-hook 'after-save-hook #'custom/org-babel-tangle-config)))
#+end_src

Auto-Tangle:

#+begin_src emacs-lisp
  ;;(require 'org-auto-tangle)
  ;;(add-hook 'org-mode-hook 'org-auto-tangle-mode)
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src


*** Hooks

It disable the fci-mode and linum-mode for org files.

#+begin_src emacs-lisp
  (defun custom/org-mode-hooks ()
    (fci-mode 0)
    (linum-mode 0)
    (org-display-inline-images))
  (add-hook 'org-mode-hook 'custom/org-mode-hooks)
#+end_src


** Elfeed

This is a feed reader within emacs:

#+begin_src emacs-lisp
  (setq elfeed-feeds (quote
    (("https://news.ycombinator.com/rss" tech hackernews)
     ("https://blog.tartanllama.xyz/feed.xml" programming cpp)
     ("https://linuxnewbieguide.org/feed/" tech linux))))
#+end_src

It is possible to change the default browser, e.g.:

~(setq browse-url-browser-function 'eww-browse-url)~

** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+end_src

Alt only to complete and not to openfile, exec command, etc, refer to
https://github.com/abo-abo/swiper/issues/86.

For enable/disable ^ for counsel-M-x, refer to
/questions/38841/counsel-m-x-always-shows.

#+begin_src emacs-lisp
  (defun custom/ivy-tab-hooks ()
    (define-key ivy-minibuffer-map (kbd "TAB") #'ivy-partial)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done))
  (add-hook 'ivy-mode-hook 'custom/ivy-tab-hooks)
#+end_src

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

*Counsel*:

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ;;("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minubuffer-history)))
#+end_src

To not start the search with ^, set the varible ivy-initial-inputs-alist to nil.

Append this to the config section of the =(use-package counsel...=.

#+begin_src text :tangle no
    ;;:config
    ;; avoid start search with ^
    ;; (setq ivy-initial-inputs-alist nil))
#+end_src

What about these?

~(setq ivy-use-virtual-buffers t)~
~(setq enable-recursive-minibuffers t)~

** Visual aids

*Which Key*:

This is triggered with /C-h {v,f}/, v stands for variable, f for functions, etc.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src


** LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    :hook (rust-mode . lsp))

  (setq lsp-prefer-capf t)
  (setq lsp-completion-provider :capf)
  (setq lsp-completion-enable t)
#+end_src


** Projectile

Key binding is set to ~C-c p~, there's a bunch of comands to run.
   
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects/")
      (setq projectile-project-search-path '("~/projects/")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src


** Language specific configuration

*** Rust

Configuration and hooks, check more for:

- configuration options at https://github.com/rust-lang/rust-mode
- lsp mode at https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-rls/

LSP rust configuration requirements:

#+begin_src text :tangle no
  rustup update
  rustup component add rls rust-analysis rust-src
#+end_src

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src

Use ~C-c C-c~ to execute =cargo run=.

#+begin_src emacs-lisp 
  (defun custom/rust-mode-hooks ()
    (setq indent-tabs-mode nil)
    (define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
    (#'lsp))
  (add-hook 'rust-mode-hook 'custom/rust-mode-hooks)
#+end_src


** Final section and comments

#+begin_src emacs-lisp
  (dev-mode)
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

#+begin_src emacs-lisp
  ;; eof
  ;; below this line, there's pure garbage
#+end_src


** Emacs Notes
 
- *company*, company "just" does code/text autocompletion and a few
  related things like docstring lookup
  
- *ivy*, ivy is a framework for interactively picking something out
  of a lists in a nicer way (here using ivy as a better M-x)
  
- *swiper*, swiper is another application of ivy, using ivy as a
  better C-s

Configuration TODO:

- swiper, done
- evilmode
- plantuml
- when opening new windows (keep configurations), check dameon mode video.
- command-log-mode
- projectile
- treemacs C-c C-p a to add, d to delete, etc..
- defun vs progn
- avoid #+results when installing packages
- learn how to use use-package
- dsp, gdb
- rust, gdb
- eval-after-load v/s hooks /2736087/eval-after-load-vs-mode-hook
- (after! ivy ...) ?
- emacs/lisp alist

Useful keybindings:

#+begin_src text :tangle no
  M-; toggle code comments
  M-x M-p to traverse M-x history (with ivy-counsel)
#+end_src

Review doc:

- Magit + Rebase

*Sources*

- r/emacs/comments/6x7ph2/is_company_different_from_helm_and_ivy/
